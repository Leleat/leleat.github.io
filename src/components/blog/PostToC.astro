---
interface Props {
    headings: { depth: number; slug: string; text: string }[];
}

const { headings } = Astro.props;
const maxHeadingsLevel = 2;
---

<aside>
    <h3>On This Page</h3>
    <div class="content" role="list">
        <div
            class="toc-item-indicator"
            data-max-headings-level={maxHeadingsLevel}
        >
        </div>
        {
            headings
                .filter((h) => h.depth < maxHeadingsLevel + 1)
                .map(({ slug, text }) => (
                    <a class="toc-item" href={`#${slug}`} role="listitem">
                        {text}
                    </a>
                ))
        }
    </div>
</aside>

<script>
    const tocItems = Array.from(document.querySelectorAll(".toc-item"));
    const tocItemIndicator = document.querySelector(
        ".toc-item-indicator",
    ) as HTMLElement;

    tocItemIndicator.style.opacity = "1";

    const observer = new IntersectionObserver((entries) => {
        const visibleHeadings = entries.filter((e) => e.isIntersecting);

        if (visibleHeadings.length > 0) {
            const tocItem = tocItems.find((item) =>
                visibleHeadings.some(
                    (h) => item.getAttribute("href") === `#${h.target.id}`,
                ),
            ) as HTMLElement;

            const itemHeight = tocItem.offsetHeight;
            const offsetTop = tocItem.offsetTop;

            tocItemIndicator.style.transform = `translateY(${offsetTop}px)`;
            tocItemIndicator.style.height = `${itemHeight}px`;
        }
    });

    const selector = [
        ...Array(Number(tocItemIndicator.dataset.maxHeadingsLevel) - 1),
    ]
        .map((_, index) => `main h${index + 2 /* Start at h2*/}`)
        .join(",");
    const headings = document.querySelectorAll(selector);

    headings.forEach((h) => observer.observe(h));
</script>

<style>
    aside {
        display: none;
    }

    @media (min-width: 80rem) {
        * {
            --toc-hpadding: 2rem;
            --toc-itemspacing: 1.125rem;

            margin: 0;
            font-size: small;
        }

        aside {
            display: flex;
            flex-direction: column;
            position: sticky;
            top: 2.25rem;
            block-size: fit-content;
            max-inline-size: 100%;
            padding: var(--content-vpadding) 0;
        }

        h3 {
            color: oklch(from var(--color-text) calc(l - 0.25) c h);
            text-transform: uppercase;
            padding-inline-start: var(--toc-hpadding);
            margin-block-end: calc(var(--toc-itemspacing) * 1.5);
        }

        .content {
            border-inline-start: 1px solid var(--color-text-dark);
            display: flex;
            flex-direction: column;
            gap: var(--toc-itemspacing);
            padding-inline-start: var(--toc-hpadding);
            position: relative;
        }

        .toc-item {
            color: var(--color-text);
            text-decoration: none;
            position: relative;

            &:hover {
                color: var(--color-yellow);

                &::before {
                    content: "#";
                    position: absolute;
                    left: calc(-1 * var(--toc-hpadding) / 2);
                }
            }
        }

        .toc-item-indicator {
            --size: 0.2rem;

            position: absolute;
            background-color: var(--color-yellow);
            border-radius: calc(infinity * 1px);
            inline-size: var(--size);
            top: 0;
            opacity: 0;
            left: calc(-1 * var(--size) / 2);
        }
    }

    @media (prefers-reduced-motion: no-preference) {
        .toc-item-indicator {
            transition:
                opacity 0.2s,
                transform 0.2s,
                height 0.2s;
        }
    }
</style>
