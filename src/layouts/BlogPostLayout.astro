---
import PostContactMe from "../components/blog/PostContactMe.astro";
import PostMetadata from "../components/blog/PostMetadata.astro";
import PostNavigationButtons from "../components/blog/PostNavigationButtons.astro";
import PostTagList from "../components/blog/PostTagList.astro";
import PostToC from "../components/blog/PostToC.astro";
import { getPublicPostsWithOldestFirst } from "../global.js";
import BlogBaseLayout from "./BlogBaseLayout.astro";

const { frontmatter, headings } = Astro.props;

const publicPosts = getPublicPostsWithOldestFirst();
const currentPostIndex = publicPosts.findIndex(
    (post) => (post as any).url === frontmatter.url,
);
const prevPost = publicPosts[currentPostIndex - 1];
const nextPost = publicPosts[currentPostIndex + 1];
---

<BlogBaseLayout title={`${frontmatter.title} | Anh Tuan Le (@Leleat)`}>
    <PostToC slot="right-sidebar" headings={headings} />
    <article>
        <h1 id={frontmatter.url.split("/").at(-1)}>
            <a href={`#${frontmatter.url.split("/").at(-1)}`}>
                {frontmatter.title}
            </a>
        </h1>
        <PostMetadata
            pubDate={frontmatter.pubDate}
            editDate={frontmatter.editDate}
            author={frontmatter.author}
            class="postmetadata"
        />
        <slot />
        <PostTagList tags={frontmatter.tags} class="tag-list" />
    </article>
    <hr />
    <PostNavigationButtons prevPost={prevPost} nextPost={nextPost} />
    <hr />
    <PostContactMe />
</BlogBaseLayout>

<style>
    article {
        display: flex;
        flex-direction: column;
    }

    hr {
        border-color: var(--color-text-dark);
        margin: 2rem 0;
    }

    .postmetadata {
        margin-block-start: 1rem;
        margin-block-end: 2rem;
    }

    .tag-list {
        margin-block-start: 4rem;
    }
</style>

<script>
    document.addEventListener("DOMContentLoaded", () => {
        document.querySelectorAll(".code-copy-button").forEach((button) => {
            let lastTimer = 0;

            button.removeAttribute("disabled");
            button.addEventListener("click", () => {
                const codeElement = button.nextElementSibling;

                if (!codeElement || codeElement.nodeName !== "CODE") {
                    throw new Error("No code element to copy code from found");
                }

                navigator.clipboard
                    .writeText(codeElement.textContent ?? "")
                    .then(() => {
                        button.classList.add("code-copied");

                        clearTimeout(lastTimer);

                        lastTimer = setTimeout(() => {
                            lastTimer = 0;
                            button.classList.remove("code-copied");
                        }, 1000);
                    })
                    .catch((error) => {
                        console.error(
                            "Failed to copy code to clipboard",
                            error,
                        );
                    });
            });
        });
    });
</script>
